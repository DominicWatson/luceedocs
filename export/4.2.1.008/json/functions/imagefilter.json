{"argMax":-1,"keywords":["image","filter"],"arguments":[{"required":true,"status":"implemeted","name":"name","type":"any","description":"The image on which this operation is performed.","defaultValue":null},{"required":true,"status":"implemeted","name":"filtername","type":"string","description":"the name of the filter executed (average,block,blur ...)","defaultValue":null},{"required":false,"status":"implemeted","name":"parameters","type":"struct","description":"parameters for the filter defined with argument filtername","defaultValue":null}],"argMin":2,"returnType":"void","status":"implemeted","name":"imagefilter","type":"java","argumentType":"fixed","description":"the function ImageFilter allows to execute a filter against a image. Below you find a list of filter names supported by the function.\nevery filter need other parameters for the configuration, listed as well below.\n\naverage\n\tA filter which averages the 3x3 neighbourhood of each pixel, providing a simple blur.\n\n\tParameters:\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- useAlpha (boolean)\n\t\tSet whether to convolve the alpha channel.\n\t- premultiplyAlpha (boolean)\n\t\tSet whether to premultiply the alpha channel.\nblock\n\tA Filter to pixellate images.\n\n\tParameters:\n\t- blockSize (integer)\n\t\tThe pixel block size.\n\t\t- min-value: 1\n\t\t- max-value: 100+\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nblur\n\tA simple blur filter. You should probably use BoxBlurFilter instead.\n\n\tParameters:\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- useAlpha (boolean)\n\t\tSet whether to convolve the alpha channel.\n\t- premultiplyAlpha (boolean)\n\t\tSet whether to premultiply the alpha channel.\nborder\n\tA filter to add a border around an image using the supplied Paint, which may be null for no painting.\n\n\tParameters:\n\t- left (integer)\n\t\tThe border size on the left edge.\n\t\t- min-value: 0\n\t- right (integer)\n\t\tThe border size on the right edge.\n\t\t- min-value: 0\n\t- top (integer)\n\t\tThe border size on the top edge.\n\t\t- min-value: 0\n\t- bottom (integer)\n\t\tThe border size on the bottom edge.\n\t\t- min-value: 0\n\t- color (String)\n\t\tThe border color.\nbump\n\tA simple embossing filter.\n\n\tParameters:\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- useAlpha (boolean)\n\t\tSet whether to convolve the alpha channel.\n\t- premultiplyAlpha (boolean)\n\t\tSet whether to premultiply the alpha channel.\ncaustics\n\tA filter which simulates underwater caustics. This can be animated to get a bottom-of-the-swimming-pool effect.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- brightness (integer)\n\t\tThe brightness.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- dispersion (numeric)\n\t\tThe dispersion.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- bgColor (String)\n\t\tThe background color.\n\t- time (numeric)\n\t\tThe time. Use this to animate the effect.\n\t- scale (numeric)\n\t\tSpecifies the scale of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 300+\n\t- samples (integer)\n\t\tThe number of samples per pixel. More samples means better quality, but slower rendering.\ncellular\n\tA filter which produces an image with a cellular texture.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- stretch (numeric)\n\t\tSpecifies the stretch factor of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 50+\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- angleCoefficient (numeric)\n\t- gradientCoefficient (numeric)\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- randomness (numeric)\n\t- gridType (String)\n\t\tthe grid type to set, one of the following:\n\t\t-  RANDOM\n\t\t-  SQUARE\n\t\t-  HEXAGONAL\n\t\t-  OCTAGONAL\n\t\t-  TRIANGULAR\n\t- distancePower (numeric)\n\t- scale (numeric)\n\t\tSpecifies the scale of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 300+\ncheck\n\tA Filter to draw grids and check patterns.\n\n\tParameters:\n\t- angle (numeric)\n\t\tThe angle of the texture.\n\t- xScale (integer)\n\t\tThe X scale of the texture.\n\t- yScale (integer)\n\t\tThe Y scale of the texture.\n\t- fuzziness (integer)\n\t\tThe fuzziness of the texture.\n\t- foreground (String)\n\t\tThe foreground color.\n\t- background (String)\n\t\tThe background color.\n\t- dimensions (Array)\nchrome\n\tA filter which simulates chrome.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- exposure (numeric)\n\t\tThe exppsure of the effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- colorSource (String)\n\t- material (String)\n\t\t Use the following format [color,opacity]; Example: \"red,0.5\"\n\t- bumpHeight (numeric)\n\t- bumpSoftness (numeric)\n\t- bumpShape (integer)\n\t- viewDistance (numeric)\n\t- bumpSource (integer)\n\t- diffuseColor (String)\ncircle\n\tA filter which wraps an image around a circular arc.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- angle (numeric)\n\t\tThe angle of the arc.\n\t- spreadAngle (numeric)\n\t\tThe spread angle of the arc.\n\t- centreX (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- centreY (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- height (numeric)\n\t\tThe height of the arc.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\ncontour\n\tA filter which draws contours on an image at given brightness levels.\n\n\tParameters:\n\t- levels (numeric)\n\t- contourColor (String)\n\t- offset (numeric)\n\t- scale (numeric)\n\t\tSpecifies the scale of the contours.\n\t\t- min-value: 0\n\t\t- max-value: 1\ncontrast\n\tA filter to change the brightness and contrast of an image.\n\n\tParameters:\n\t- brightness (numeric)\n\t\tThe filter brightness.\n\t\t- min-value: 0\n\t\t- max-value: 0\n\t- contrast (numeric)\n\t\tThe filter contrast.\n\t\t- min-value: 0\n\t\t- max-value: 0\n\t- dimensions (Array)\ncrop\n\tA filter which crops an image to a given rectangle.\n\n\tParameters:\n\t- x (integer)\n\t\tThe left edge of the crop rectangle.\n\t- y (integer)\n\t\tThe top edge of the crop rectangle.\n\t- width (integer)\n\t\tThe width of the crop rectangle.\n\t- height (integer)\n\t\tThe height of the crop rectangle.\ncrystallize\n\tA filter which applies a crystallizing effect to an image, by producing Voronoi cells filled with colours from the image.\n\n\tParameters:\n\t- edgeThickness (numeric)\n\t- fadeEdges (boolean)\n\t- edgeColor (String)\n\t- amount (numeric)\n\t\tThe amount of effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- stretch (numeric)\n\t\tSpecifies the stretch factor of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 50+\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- angleCoefficient (numeric)\n\t- gradientCoefficient (numeric)\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- randomness (numeric)\n\t- gridType (String)\n\t\tthe grid type to set, one of the following:\n\t\t-  RANDOM\n\t\t-  SQUARE\n\t\t-  HEXAGONAL\n\t\t-  OCTAGONAL\n\t\t-  TRIANGULAR\n\t- distancePower (numeric)\n\t- scale (numeric)\n\t\tSpecifies the scale of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 300+\ncurl\n\tA page curl effect.\n\n\tParameters:\n\t- radius (numeric)\n\t- angle (numeric)\n\t- transition (numeric)\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\ndespeckle\n\tA filter which removes noise from an image using a \"pepper and salt\" algorithm.\n\n\tParameters:\ndiffuse\n\tThis filter diffuses an image by moving its pixels in random directions.\n\n\tParameters:\n\t- scale (numeric)\n\t\tSpecifies the scale of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 100+\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\ndiffusion\n\tA filter which uses Floyd-Steinberg error diffusion dithering to halftone an image.\n\n\tParameters:\n\t- levels (integer)\n\t\tThe number of dither levels.\n\t- serpentine (boolean)\n\t\tSet whether to use a serpentine pattern for return or not. This can reduce 'avalanche' artifacts in the output.\n\t- colorDither (boolean)\n\t\tSet whether to use a color dither.\ndilate\n\tGiven a binary image, this filter performs binary dilation, setting all added pixels to the given 'new' color.\n\n\tParameters:\n\t- threshold (integer)\n\t\tThe threshold - the number of neighbouring pixels for dilation to occur.\n\t- iterations (integer)\n\t\tThe number of iterations the effect is performed.\n\t\t- min-value: 0\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- newColor (String)\ndisplace\n\tA filter which simulates the appearance of looking through glass. A separate grayscale displacement image is provided and\n\tpixels in the source image are displaced according to the gradient of the displacement map.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of distortion.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- displacementMap (Image)\n\t\tThe displacement map.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\ndissolve\n\tA filter which \"dissolves\" an image by thresholding the alpha channel with random numbers.\n\n\tParameters:\n\t- density (numeric)\n\t\tThe density of the image in the range 0..1.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- softness (numeric)\n\t\tThe softness of the dissolve in the range 0..1.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- dimensions (Array)\ndither\n\tA filter which performs ordered dithering on an image.\n\n\tParameters:\n\t- levels (integer)\n\t\tThe number of dither levels.\n\t- colorDither (boolean)\n\t\tSet whether to use a color dither.\n\t- dimensions (Array)\nedge\n\tAn edge-detection filter.\n\n\tParameters:\nemboss\n\tA class to emboss an image.\n\n\tParameters:\n\t- bumpHeight (numeric)\n\t- azimuth (numeric)\n\t- elevation (numeric)\n\t- emboss (boolean)\nequalize\n\tA filter to perform auto-equalization on an image.\n\n\tParameters:\nerode\n\tGiven a binary image, this filter performs binary erosion, setting all removed pixels to the given 'new' color.\n\n\tParameters:\n\t- threshold (integer)\n\t\tThe threshold - the number of neighbouring pixels for dilation to occur.\n\t- iterations (integer)\n\t\tThe number of iterations the effect is performed.\n\t\t- min-value: 0\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- newColor (String)\nexposure\n\tA filter which changes the exposure of an image.\n\n\tParameters:\n\t- exposure (numeric)\n\t\tThe exposure level.\n\t\t- min-value: 0\n\t\t- max-value: 5+\n\t- dimensions (Array)\nfade\n\tAn abstract superclass for point filters. The interface is the same as the old RGBImageFilter.\n\n\tParameters:\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- sides (integer)\n\t- fadeStart (numeric)\n\t- fadeWidth (numeric)\n\t- invert (boolean)\n\t- dimensions (Array)\nfeedback\n\tA filter which priduces a video feedback effect by repeated transformations.\n\n\tParameters:\n\t- iterations (integer)\n\t\tThe number of iterations.\n\t\t- min-value: 0\n\t- angle (numeric)\n\t\tSpecifies the angle of each iteration.\n\t- centreX (numeric)\n\t\tThe centre of the effect in the X direction as a proportion of the image size.\n\t- centreY (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- distance (numeric)\n\t\tSpecifies the distance to move on each iteration.\n\t- rotation (numeric)\n\t\tSpecifies the amount of rotation on each iteration.\n\t- zoom (numeric)\n\t\tSpecifies the amount to scale on each iteration.\n\t- startAlpha (numeric)\n\t\tThe alpha value at the first iteration.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- endAlpha (numeric)\n\t\tThe alpha value at the last iteration.\n\t\t- min-value: 0\n\t\t- max-value: 1\nfill\n\tA filter which fills an image with a given color. Normally you would just call Graphics.fillRect but it can sometimes be useful\n\tto go via a filter to fit in with an existing API.\n\n\tParameters:\n\t- fillColor (String)\n\t\tThe fill color.\n\t- dimensions (Array)\nflare\n\tAn experimental filter for rendering lens flares.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- centreX (numeric)\n\t- centreY (numeric)\n\t- ringWidth (numeric)\n\t- baseAmount (numeric)\n\t- ringAmount (numeric)\n\t- rayAmount (numeric)\n\t- color (String)\n\t- dimensions (Array)\nflip\n\tA filter which flips images or rotates by multiples of 90 degrees.\n\n\tParameters:\n\t- operation (integer)\n\t\tThe filter operation.\ngain\n\tA filter which changes the gain and bias of an image - similar to ContrastFilter.\n\n\tParameters:\n\t- gain (numeric)\n\t\tThe gain.\n\t\t- min-value:: 0\n\t\t- max-value:: 1\n\t- bias (numeric)\n\t\tThe bias.\n\t\t- min-value:: 0\n\t\t- max-value:: 1\n\t- dimensions (Array)\ngamma\n\tA filter for changing the gamma of an image.\n\n\tParameters:\n\t- gamma (numeric)\n\t\tThe gamma levels.\n\t- dimensions (Array)\ngaussian\n\tA filter which applies Gaussian blur to an image. This is a subclass of ConvolveFilter\n\twhich simply creates a kernel with a Gaussian distribution for blurring.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.\n\t\t- min-value: 0\n\t\t- max-value: 100+\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- useAlpha (boolean)\n\t\tSet whether to convolve the alpha channel.\n\t- premultiplyAlpha (boolean)\n\t\tSet whether to premultiply the alpha channel.\nglint\n\tA filter which renders \"glints\" on bright parts of the image.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of glint.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- blur (numeric)\n\t\tThe blur that is applied before thresholding.\n\t- glintOnly (boolean)\n\t\tSet whether to render the stars and the image or only the stars.\n\t- length (integer)\n\t\tThe length of the stars.\n\t- threshold (numeric)\n\t\tThe threshold value.\nglow\n\tA filter which adds Gaussian blur to an image, producing a glowing effect.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of glow.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- radius (numeric)\n\t\tThe radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.\n\t\t- min-value: 0\n\t\t- max-value: 100+\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- useAlpha (boolean)\n\t\tSet whether to convolve the alpha channel.\n\t- premultiplyAlpha (boolean)\n\t\tSet whether to premultiply the alpha channel.\ngradient\n\tA filter which draws a coloured gradient. This is largely superceded by GradientPaint in Java1.2, but does provide a few\n\tmore gradient options.\n\n\tParameters:\n\t- interpolation (integer)\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- point1 (String)\n\t\t Use the following format [X-coordinate,Y-coordinate]; Example: \"13,20\"\n\t- point2 (String)\n\t\t Use the following format [X-coordinate,Y-coordinate]; Example: \"13,20\"\n\t- paintMode (integer)\n\t- type (integer)\ngray\n\tA filter which 'grays out' an image by averaging each pixel with white.\n\n\tParameters:\n\t- dimensions (Array)\ngrayscale\n\tA filter which converts an image to grayscale using the NTSC brightness calculation.\n\n\tParameters:\n\t- dimensions (Array)\nhalftone\n\tA filter which can be used to produce wipes by transferring the luma of a mask image into the alpha channel of the source.\n\n\tParameters:\n\t- density (numeric)\n\t\tThe density of the image in the range 0..1.\n\t\t*arg density The density\n\t- softness (numeric)\n\t\tThe softness of the effect in the range 0..1.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- invert (boolean)\n\t- mask (Image)\ninterpolate\n\tA filter which interpolates between two images. You can set the interpolation factor outside the range 0 to 1\n\tto extrapolate images.\n\n\tParameters:\n\t- destination (Image)\n\t\tThe destination image.\n\t- interpolation (numeric)\n\t\tThe interpolation factor.\ninvert\n\tA filter which inverts the RGB channels of an image.\n\n\tParameters:\n\t- dimensions (Array)\nkaleidoscope\n\tA Filter which produces the effect of looking into a kaleidoscope.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- angle (numeric)\n\t\tThe angle of the kaleidoscope.\n\t- centreX (numeric)\n\t\tThe centre of the effect in the X direction as a proportion of the image size.\n\t- centreY (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- sides (integer)\n\t\tThe number of sides of the kaleidoscope.\n\t\t- min-value: 2\n\t- angle2 (numeric)\n\t\tThe secondary angle of the kaleidoscope.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nlevels\n\tA filter which allows levels adjustment on an image.\n\n\tParameters:\n\t- lowLevel (numeric)\n\t- highLevel (numeric)\n\t- lowOutputLevel (numeric)\n\t- highOutputLevel (numeric)\nlife\n\tA filter which performs one round of the game of Life on an image.\n\n\tParameters:\n\t- iterations (integer)\n\t\tThe number of iterations the effect is performed.\n\t\t- min-value: 0\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- newColor (String)\nlight\n\tA filter which produces lighting and embossing effects.\n\n\tParameters:\n\t- colorSource (String)\n\t- material (String)\n\t\t Use the following format [color,opacity]; Example: \"red,0.5\"\n\t- bumpHeight (numeric)\n\t- bumpSoftness (numeric)\n\t- bumpShape (integer)\n\t- viewDistance (numeric)\n\t- bumpSource (integer)\n\t- diffuseColor (String)\nlookup\n\tA filter which uses the brightness of each pixel to lookup a color from a colormap.\n\n\tParameters:\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- dimensions (Array)\nmap\n\tAn abstract superclass for filters which distort images in some way. The subclass only needs to override\n\ttwo methods to provide the mapping between source and destination pixels.\n\n\tParameters:\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nmarble\n\tThis filter applies a marbling effect to an image, displacing pixels by random amounts.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- xScale (numeric)\n\t\tThe X scale of the effect.\n\t- yScale (numeric)\n\t\tThe Y scale of the effect.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nmask\n\tApplies a bit mask to each ARGB pixel of an image. You can use this for, say, masking out the red channel.\n\n\tParameters:\n\t- mask (integer)\n\t- dimensions (Array)\nmaximum\n\tA filter which replcaes each pixel by the maximum of itself and its eight neightbours.\n\n\tParameters:\nmedian\n\tA filter which performs a 3x3 median operation. Useful for removing dust and noise.\n\n\tParameters:\nminimum\n\tA filter which replcaes each pixel by the mimimum of itself and its eight neightbours.\n\n\tParameters:\nmirror\n\n\n\tParameters:\n\t- angle (numeric)\n\t\tSpecifies the angle of the mirror.\n\t- centreY (numeric)\n\t- distance (numeric)\n\t- rotation (numeric)\n\t- gap (numeric)\n\t- opacity (numeric)\n\t\tThe opacity of the reflection.\nnoise\n\tA filter which adds random noise into an image.\n\n\tParameters:\n\t- amount (integer)\n\t\tThe amount of effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- monochrome (boolean)\n\t\tSet whether to use monochrome noise.\n\t- density (numeric)\n\t\tThe density of the noise.\n\t- distribution (integer)\n\t\tThe distribution of the noise.\n\t- dimensions (Array)\noffset\n\tAn abstract superclass for filters which distort images in some way. The subclass only needs to override\n\ttwo methods to provide the mapping between source and destination pixels.\n\n\tParameters:\n\t- xOffset (integer)\n\t- yOffset (integer)\n\t- wrap (boolean)\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\noil\n\tA filter which produces a \"oil-painting\" effect.\n\n\tParameters:\n\t- levels (integer)\n\t\tThe number of levels for the effect.\n\t- range (integer)\n\t\tThe range of the effect in pixels.\nopacity\n\tSets the opacity (alpha) of every pixel in an image to a constant value.\n\n\tParameters:\n\t- opacity (integer)\n\t\tThe opacity.\n\t- dimensions (Array)\noutline\n\tGiven a binary image, this filter converts it to its outline, replacing all interior pixels with the 'new' color.\n\n\tParameters:\n\t- iterations (integer)\n\t\tThe number of iterations the effect is performed.\n\t\t- min-value: 0\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- newColor (String)\nperspective\n\tA filter which performs a perspective distortion on an image.\n\n\tParameters:\n\t- xLT (numeric)\n\t\tthe new horizontal position of the top left corner, negative values are translated to image-width - x.\n\t- yLT (numeric)\n\t\tthe new vertical position of the top left corner, negative values are translated to image-height - y.\n\t- xRT (numeric)\n\t\tthe new horizontal position of the top right corner, negative values are translated to image-width - x.\n\t- yRT (numeric)\n\t\tthe new vertical position of the top right corner, negative values are translated to image-height - y.\n\t- xRB (numeric)\n\t\tthe new horizontal position of the bottom right corner, negative values are translated to image-width - x.\n\t- yRB (numeric)\n\t\tthe new vertical position of the bottom right corner, negative values are translated to image-height - y.\n\t- xLB (numeric)\n\t\tthe new horizontal position of the bottom left corner, negative values are translated to image-width - x.\n\t- yLB (numeric)\n\t\tthe new vertical position of the bottom left corner, negative values are translated to image-height - y.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\npinch\n\tA filter which performs the popular whirl-and-pinch distortion effect.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- amount (numeric)\n\t\tThe amount of pinch.\n\t\t- min-value: -1\n\t\t- max-value: 1\n\t- angle (numeric)\n\t\tThe angle of twirl in radians. 0 means no distortion.\n\t- centreX (numeric)\n\t\tThe centre of the effect in the X direction as a proportion of the image size.\n\t- centreY (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nplasma\n\tA filter which acts as a superclass for filters which need to have the whole image in memory\n\tto do their stuff.\n\n\tParameters:\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 10\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- scaling (numeric)\n\t- useColormap (boolean)\n\t- useImageColors (boolean)\n\t- seed (integer)\npointillize\n\tA filter which produces an image with a cellular texture.\n\n\tParameters:\n\t- fuzziness (numeric)\n\t- edgeThickness (numeric)\n\t- fadeEdges (boolean)\n\t- edgeColor (String)\n\t- amount (numeric)\n\t\tThe amount of effect.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- stretch (numeric)\n\t\tSpecifies the stretch factor of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 50+\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- angleCoefficient (numeric)\n\t- gradientCoefficient (numeric)\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- randomness (numeric)\n\t- gridType (String)\n\t\tthe grid type to set, one of the following:\n\t\t-  RANDOM\n\t\t-  SQUARE\n\t\t-  HEXAGONAL\n\t\t-  OCTAGONAL\n\t\t-  TRIANGULAR\n\t- distancePower (numeric)\n\t- scale (numeric)\n\t\tSpecifies the scale of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 300+\npolar\n\tA filter which distorts and image by performing coordinate conversions between rectangular and polar coordinates.\n\n\tParameters:\n\t- type (String)\n\t\tThe distortion type, valid values are\n\t\t- RECT_TO_POLAR = Convert from rectangular to polar coordinates\n\t\t- POLAR_TO_RECT = Convert from polar to rectangular coordinates\n\t\t- INVERT_IN_CIRCLE = Invert the image in a circle\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nposterize\n\tA filter to posterize an image.\n\n\tParameters:\n\t- numLevels (integer)\n\t\tThe number of levels in the output image.\n\t- dimensions (Array)\nquantize\n\tA filter which quantizes an image to a set number of colors - useful for producing\n\timages which are to be encoded using an index color model. The filter can perform\n\tFloyd-Steinberg error-diffusion dithering if required. At present, the quantization\n\tis done using an octtree algorithm but I eventually hope to add more quantization\n\tmethods such as median cut. Note: at present, the filter produces an image which\n\tuses the RGB color model (because the application it was written for required it).\n\tI hope to extend it to produce an IndexColorModel by request.\n\n\tParameters:\n\t- serpentine (boolean)\n\t\tSet whether to use a serpentine pattern for return or not. This can reduce 'avalanche' artifacts in the output.\n\t- numColors (String)\n\t\tThe number of colors to quantize to.\n\t- dither (boolean)\n\t\tSet whether to use dithering or not. If not, the image is posterized.\nquilt\n\tA filter which acts as a superclass for filters which need to have the whole image in memory\n\tto do their stuff.\n\n\tParameters:\n\t- iterations (integer)\n\t\tThe number of iterations the effect is performed.\n\t\t- min-value: 0\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- a (numeric)\n\t- b (numeric)\n\t- c (numeric)\n\t- d (numeric)\n\t- k (integer)\nrays\n\tA filter which produces the effect of light rays shining out of an image.\n\n\tParameters:\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- strength (numeric)\n\t\tThe strength of the rays.\n\t- opacity (numeric)\n\t\tThe opacity of the rays.\n\t- raysOnly (boolean)\n\t\tSet whether to render only the rays.\n\t- threshold (numeric)\n\t\tThe threshold value.\n\t- angle (numeric)\n\t- centreX (numeric)\n\t- centreY (numeric)\n\t- distance (numeric)\n\t- rotation (numeric)\n\t- zoom (numeric)\nrescale\n\tA filter which simply multiplies pixel values by a given scale factor.\n\n\tParameters:\n\t- scale (numeric)\n\t\tSpecifies the scale factor.\n\t\t- min-value: 1\n\t\t- max-value: 5+\n\t- dimensions (Array)\nripple\n\tA filter which distorts an image by rippling it in the X or Y directions.\n\tThe amplitude and wavelength of rippling can be specified as well as whether\n\tpixels going off the edges are wrapped or not.\n\n\tParameters:\n\t- xAmplitude (numeric)\n\t\tThe amplitude of ripple in the X direction.\n\t- xWavelength (numeric)\n\t\tThe wavelength of ripple in the X direction.\n\t- yAmplitude (numeric)\n\t\tThe amplitude of ripple in the Y direction.\n\t- yWavelength (numeric)\n\t\tThe wavelength of ripple in the Y direction.\n\t- waveType (String)\n\t\tThe wave type.\n\t\tvalid values are:\n\t\t- sine (default):  Sine wave ripples.\n\t\t- sawtooth: Sawtooth wave ripples.\n\t\t- triangle: Triangle wave ripples.\n\t\t- noise: Noise ripples.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nrotate\n\tA filter which rotates an image. These days this is easier done with Java2D, but this filter remains.\n\n\tParameters:\n\t- angle (numeric)\n\t\tSpecifies the angle of rotation.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nsaturation\n\tA filter to change the saturation of an image. This works by calculating a grayscale version of the image\n\tand then extrapolating away from it.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of saturation change. 1 leaves the image unchanged, values between 0 and 1 desaturate, 0 completely\n\t\tdesaturates it and values above 1 increase the saturation.\n\t- dimensions (Array)\nscale\n\tScales an image using the area-averaging algorithm, which can't be done with AffineTransformOp.\n\n\tParameters:\n\t- width (integer)\n\t- height (integer)\nscratch\n\n\n\tParameters:\n\t- angle (numeric)\n\t- density (numeric)\n\t- angleVariation (numeric)\n\t- length (numeric)\n\t- seed (integer)\n\t- color (String)\n\t- width (numeric)\nshade\n\tA filter which acts as a superclass for filters which need to have the whole image in memory\n\tto do their stuff.\n\n\tParameters:\n\t- bumpHeight (numeric)\n\t- bumpSoftness (numeric)\n\t- bumpSource (integer)\nshadow\n\tA filter which draws a drop shadow based on the alpha channel of the image.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.\n\t- angle (numeric)\n\t\tSpecifies the angle of the shadow.\n\t- distance (numeric)\n\t\tThe distance of the shadow.\n\t- opacity (numeric)\n\t\tThe opacity of the shadow.\n\t- shadowColor (String)\n\t\tThe color of the shadow.\n\t- addMargins (boolean)\n\t\tSet whether to increase the size of the output image to accomodate the shadow.\n\t- shadowOnly (boolean)\n\t\tSet whether to only draw the shadow without the original image.\nshape\n\tA filter which acts as a superclass for filters which need to have the whole image in memory\n\tto do their stuff.\n\n\tParameters:\n\t- useAlpha (boolean)\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- invert (boolean)\n\t- factor (numeric)\n\t- merge (boolean)\n\t- type (integer)\nsharpen\n\tA filter which performs a simple 3x3 sharpening operation.\n\n\tParameters:\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- useAlpha (boolean)\n\t\tSet whether to convolve the alpha channel.\n\t- premultiplyAlpha (boolean)\n\t\tSet whether to premultiply the alpha channel.\nshatter\n\n\n\tParameters:\n\t- iterations (integer)\n\t- centreX (numeric)\n\t- centreY (numeric)\n\t- transition (numeric)\n\t- distance (numeric)\n\t- rotation (numeric)\n\t- zoom (numeric)\n\t- startAlpha (numeric)\n\t- endAlpha (numeric)\n\t- tile (integer)\nshear\n\tAn abstract superclass for filters which distort images in some way. The subclass only needs to override\n\ttwo methods to provide the mapping between source and destination pixels.\n\n\tParameters:\n\t- resize (boolean)\n\t- xAngle (numeric)\n\t- yAngle (numeric)\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nshine\n\tA filter which simply multiplies pixel values by a given scale factor.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.\n\t- brightness (numeric)\n\t- angle (numeric)\n\t- softness (numeric)\n\t- distance (numeric)\n\t- shadowOnly (boolean)\n\t- bevel (numeric)\n\t- shineColor (String)\nskeleton\n\tA filter which reduces a binary image to a skeleton.\n\tBased on an algorithm by Zhang and Suen (CACM, March 1984, 236-239).\n\n\tParameters:\n\t- iterations (integer)\n\t\tThe number of iterations the effect is performed.\n\t\t- min-value: 0\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- newColor (String)\nsmear\n\tA filter which acts as a superclass for filters which need to have the whole image in memory\n\tto do their stuff.\n\n\tParameters:\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- density (numeric)\n\t- distance (integer)\n\t- shape (integer)\n\t- scatter (numeric)\n\t- mix (numeric)\n\t- fadeout (integer)\n\t- background (boolean)\nsolarize\n\tA filter which solarizes an image.\n\n\tParameters:\n\t- dimensions (Array)\nsparkle\n\tAn abstract superclass for point filters. The interface is the same as the old RGBImageFilter.\n\n\tParameters:\n\t- radius (integer)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- amount (integer)\n\t\tThe amount of sparkle.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- randomness (integer)\n\t- rays (integer)\n\t- color (String)\n\t- dimensions (Array)\nsphere\n\tA filter which simulates a lens placed over an image.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- centreX (numeric)\n\t\tThe centre of the effect in the X direction as a proportion of the image size.\n\t- centreY (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- refractionIndex (numeric)\n\t\tThe index of refaction.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nstamp\n\tA filter which produces a rubber-stamp type of effect by performing a thresholded blur.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- softness (numeric)\n\t\tThe softness of the effect in the range 0..1.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- white (String)\n\t\tThe color to be used for pixels above the upper threshold.\n\t- black (String)\n\t\tThe color to be used for pixels below the lower threshold.\n\t- threshold (numeric)\n\t\tThe threshold value.\n\t- dimensions (Array)\nswim\n\tA filter which distorts an image as if it were underwater.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of swim.\n\t\t- min-value: 0\n\t\t- max-value: 100+\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- stretch (numeric)\n\t\tSpecifies the stretch factor of the distortion.\n\t\t- min-value: 1\n\t\t- max-value: 50+\n\t- angle (numeric)\n\t\tSpecifies the angle of the effect.\n\t- time (numeric)\n\t\tSpecifies the time. Use this to animate the effect.\n\t- scale (numeric)\n\t\tSpecifies the scale of the distortion.\n\t\t- min-value: 1\n\t\t- max-value: 300+\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\ntexture\n\tAn abstract superclass for point filters. The interface is the same as the old RGBImageFilter.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- stretch (numeric)\n\t\tSpecifies the stretch factor of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 50+\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- operation (integer)\n\t- scale (numeric)\n\t\tSpecifies the scale of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 300+\n\t- dimensions (Array)\nthreshold\n\tA filter which performs a threshold operation on an image.\n\n\tParameters:\n\t- white (integer)\n\t\tThe color to be used for pixels above the upper threshold.\n\t- black (integer)\n\t\tThe color to be used for pixels below the lower threshold.\n\t- lowerThreshold (integer)\n\t\tThe lower threshold value.\n\t- upperThreshold (integer)\n\t\tThe upper threshold value.\n\t- dimensions (Array)\ntwirl\n\tA Filter which distorts an image by twisting it from the centre out.\n\tThe twisting is centred at the centre of the image and extends out to the smallest of\n\tthe width and height. Pixels outside this radius are unaffected.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- angle (numeric)\n\t\tThe angle of twirl in radians. 0 means no distortion.\n\t- centreX (numeric)\n\t\tThe centre of the effect in the X direction as a proportion of the image size.\n\t- centreY (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nunsharp\n\tA filter which subtracts Gaussian blur from an image, sharpening it.\n\n\tParameters:\n\t- amount (numeric)\n\t\tThe amount of sharpening.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- threshold (integer)\n\t\tThe threshold value.\n\t- radius (numeric)\n\t\tThe radius of the kernel, and hence the amount of blur. The bigger the radius, the longer this filter will take.\n\t\t- min-value: 0\n\t\t- max-value: 100+\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- useAlpha (boolean)\n\t\tSet whether to convolve the alpha channel.\n\t- premultiplyAlpha (boolean)\n\t\tSet whether to premultiply the alpha channel.\nwater\n\tA filter which produces a water ripple distortion.\n\n\tParameters:\n\t- radius (numeric)\n\t\tThe radius of the effect.\n\t\t- min-value: 0\n\t- centreX (numeric)\n\t\tThe centre of the effect in the X direction as a proportion of the image size.\n\t- centreY (numeric)\n\t\tThe centre of the effect in the Y direction as a proportion of the image size.\n\t- wavelength (numeric)\n\t\tThe wavelength of the ripples.\n\t- amplitude (numeric)\n\t\tThe amplitude of the ripples.\n\t- phase (numeric)\n\t\tThe phase of the ripples.\n\t- edgeAction (String)\n\t\tThe action to perfomr for pixels off the image edges.\n\t\tvalid values are:\n\t\t- clamp (default): Clamp pixels off the edge to the nearest edge.\n\t\t- wrap: Wrap pixels off the edge to the opposite edge.\n\t\t- zero: Treat pixels off the edge as zero\n\t- interpolation (String)\n\t\tThe type of interpolation to perform.\n\t\tvalid values are:\n\t\t- bilinear (default): Use bilinear interpolation.\n\t\t- nearest_neighbour: Use nearest-neighbour interpolation.\nweave\n\tAn abstract superclass for point filters. The interface is the same as the old RGBImageFilter.\n\n\tParameters:\n\t- useImageColors (boolean)\n\t- xGap (numeric)\n\t- xWidth (numeric)\n\t- yWidth (numeric)\n\t- yGap (numeric)\n\t- crossings ([[I)\n\t- roundThreads (boolean)\n\t- shadeCrossings (boolean)\n\t- dimensions (Array)\nwood\n\tA filter which produces a simulated wood texture. This is a bit of a hack, but might be usefult to some people.\n\n\tParameters:\n\t- turbulence (numeric)\n\t\tSpecifies the turbulence of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- stretch (numeric)\n\t\tSpecifies the stretch factor of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 50+\n\t- angle (numeric)\n\t\tSpecifies the angle of the texture.\n\t- colormap (Colormap)\n\t\tThe colormap to be used for the filter. Use function ImageFilterColorMap to create.\n\t- gain (numeric)\n\t\tSpecifies the gain of the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- rings (numeric)\n\t\tSpecifies the rings value.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- fibres (numeric)\n\t\tSpecifies the amount of fibres in the texture.\n\t\t- min-value: 0\n\t\t- max-value: 1\n\t- scale (numeric)\n\t\tSpecifies the scale of the texture.\n\t\t- min-value: 1\n\t\t- max-value: 300+\n\t- dimensions (Array)"}