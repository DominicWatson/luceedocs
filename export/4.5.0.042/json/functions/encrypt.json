{"argMax":-1,"arguments":[{"required":true,"status":"implemeted","name":"string","type":"string","description":"String to encrypt.","defaultValue":null},{"required":true,"status":"implemeted","name":"key","type":"string","description":"Key or seed used to encrypt the string.\n- For the CFMX_COMPAT algorithm, any combination of any number of characters; used as a seed used to generate a 32-bit encryption key.\n- For all other algorithms, a key in the format used by the algorithm. For these algorithms, use the GenerateSecretKey function to generate the key.","defaultValue":null},{"required":false,"status":"implemeted","name":"algorithm","type":"string","description":"The algorithm to use to decrypt the string. Must be the same as the algorithm used to encrypt the string.\n- CFMX_COMPAT(default): the CFML specific algorithm. This algorithm is the least secure option\n- AES: the Advanced Encryption Standard specified by the National Institute of Standards and Technology (NIST) FIPS-197\n- BLOWFISH: the Blowfish algorithm defined by Bruce Schneier\n- DES: the Data Encryption Standard algorithm defined by NIST FIPS-46-3\n- DESEDE: the \"Triple DES\" algorithm defined by NIST FIPS-46-3\nYou may also specify other algorithm names as well as the feedback mode and padding scheme where applicable (in the format algorithm/mode/padding) as documented in the Java Cryptography Architecture (JCA) Reference Guide.","defaultValue":"cfmx_compat"},{"required":false,"status":"implemeted","name":"encoding","type":"string","description":"The binary encoding used to represent the data as a string. Must be the same as the algorithm used to encrypt the string.\n- Base64: the Base64 algorithm, as specified by IETF RFC 2045.\n- Hex: the characters A-F and 0-9 represent the hexadecimal byte values.\n- UU(default): the UNIX standard UUEncode algorithm .","defaultValue":"uu"},{"required":false,"status":"implemeted","name":"IVorSalt","type":"any","description":"Initialization Vector for algorithms with Feedback Mode that is not ECB, or Salt for Password Based Encryption algorithms","defaultValue":null},{"required":false,"status":"implemeted","name":"iterations","type":"number","description":"number of Iterations for Password Based Encryption algorithms (ignored for all other algorithms). NIST recommends a minimum value of 1000.","defaultValue":null}],"argMin":2,"returnType":"string","status":"implemeted","name":"encrypt","type":"java","argumentType":"fixed","description":"Encrypts a string. Uses a symmetric key-based algorithm, in\n        which the same key is used to encrypt and decrypt a string.\n        The security of the encrypted string depends on maintaining\n        the secrecy of the key. Uses an XOR-based algorithm that uses\n        a pseudo-random 32-bit key, based on a seed passed by the user\n        as a function parameter."}